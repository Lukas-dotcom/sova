(function () {
    'use strict';

    const SETTINGS_URL = 'https://raw.githubusercontent.com/Lukas-dotcom/sova/refs/heads/main/HE-sova-settings.json';
    const OPENAI_API_KEY = window.__OPENAI_API_KEY || "";

    let promptRules = [];

    console.log('ü¶â Skript spusten na strance:', window.location.href);

    function fetchSettings() {
        console.log('üì• Nacitam nastaveni z:', SETTINGS_URL);
        GM_xmlhttpRequest({
            method: "GET",
            url: SETTINGS_URL,
            onload: function (response) {
                try {
                    const json = JSON.parse(response.responseText);
                    const rules = json?.hodnoceniAi?.rules;
                    if (rules?.length) {
                        promptRules = rules;
                        console.log('‚úÖ Nactena pravidla:', promptRules);
                        startScript();
                    } else {
                        console.error("‚ö†Ô∏è Nenalezena zadna pravidla v JSON.");
                    }
                } catch (e) {
                    console.error("‚ùå Chyba pri parsovani JSON:", e);
                }
            }
        });
    }

    function expandAllResponses() {
        const buttons = document.querySelectorAll("button.js-accordion__toggle");
        console.log(`üîß Oteviram ${buttons.length} sekci ‚ÄûReagovat‚Äú`);
        buttons.forEach((btn) => {
            const acc = btn.closest('.js-accordion');
            if (acc && !acc.classList.contains('is-active')) {
                btn.click();
            }
        });
    }

    function injectButtons() {
        const posts = document.querySelectorAll("li.c-box-list__item.c-post");
        console.log(`üß© Nalezeno ${posts.length} recenzi`);

        posts.forEach((post) => {
            const toggleBtn = post.querySelector(".js-accordion__toggle");
            if (!toggleBtn) return;

            const container = toggleBtn.parentElement;

            promptRules.forEach((rule, index) => {
                const id = `ai-btn-${index}`;
                if (container.querySelector(`.${id}`)) return;

                const newBtn = document.createElement("button");
                newBtn.textContent = `${rule.tlaciko} ü¶â`;
                newBtn.className = `e-button e-button--simple ai-generate-btn ${id}`;
                newBtn.style.marginLeft = '0.5em';
                newBtn.addEventListener("click", () =>
                    handleGenerate(
                        post,
                        rule.promt,
                        rule.model || "gpt-4-turbo",
                        parseFloat(rule.temperature) || 0.7
                    )
                );
                container.appendChild(newBtn);
            });
        });
    }

    async function handleGenerate(post, promptTemplate, model, temperature) {
        try {
            console.log("üü° Generuji odpoved pro recenzi:", post.id);

            const HEtextRecenze = post.querySelector("p.c-post__summary")?.innerText?.trim() || "";
            const HEpros = Array.from(post.querySelectorAll(".c-attributes-list--pros li")).map(el => el.innerText.trim()).filter(Boolean).join(", ");
            const HEcons = Array.from(post.querySelectorAll(".c-attributes-list--cons li")).map(el => el.innerText.trim()).filter(Boolean).join(", ");

            const textarea = post.querySelector("textarea[name='text']");
            if (textarea) {
                const existingResponse = textarea.value?.trim();
                const isPrewritten = existingResponse && existingResponse !== "üïê Generuji odpoved...";

                textarea.value = "üïê Generuji odpoved...";
                textarea.disabled = true;

                try {
                    const finalResponse = await generateReply(
                        promptTemplate, HEtextRecenze, HEpros, HEcons, model, temperature, isPrewritten ? existingResponse : ""
                    );
                    textarea.value = finalResponse;
                } catch (e) {
                    textarea.value = "‚ùå Chyba pri generovani odpovedi.";
                } finally {
                    textarea.disabled = false;
                    textarea.scrollIntoView({ behavior: "smooth", block: "center" });
                    textarea.focus();
                }
            }
        } catch (e) {
            console.error("‚ùå Chyba handleGenerate:", e);
        }
    }

    async function generateReply(promptTemplate, HEtextRecenze, HEpros, HEcons, model, temperature, priorResponse = "") {
        let prompt = promptTemplate;

        if (priorResponse) {
            prompt = `P≈ôi tvorbƒõ se ≈ôiƒè obsahem t√©to odpovƒõdi: ${priorResponse}. ` + prompt;
        }
        if (HEcons) {
            prompt = `Toto je co z√°kazn√≠kovi vadilo: ${HEcons}. ` + prompt;
        }
        if (HEpros) {
            prompt = `Toto je co z√°kazn√≠k na e-shopu chv√°l√≠: ${HEpros}. ` + prompt;
        }
        if (HEtextRecenze) {
            prompt = `Toto je text recenze z√°kazn√≠ka: ${HEtextRecenze}. ` + prompt;
        }
        prompt = `Vytvo≈ô odpovƒõƒè na z√°kaznickou recenzi. ` + prompt;

        const res = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${OPENAI_API_KEY}`,
            },
            body: JSON.stringify({
                model: model,
                messages: [{ role: "user", content: prompt }],
                temperature: temperature
            })
        });

        const data = await res.json();
        return data.choices?.[0]?.message?.content?.trim() || "[‚ö†Ô∏è Odpoved se nepodarilo ziskat]";
    }

    function injectGlobalButtons() {
        const tabList = document.querySelector(".c-tabs__list");
        if (!tabList) return;

        promptRules.forEach((rule, index) => {
            const globalBtn = document.createElement("button");
            globalBtn.textContent = `${rule.tlaciko} (v≈°e) ü¶â`;
            globalBtn.className = `e-button e-button--simple ai-generate-all-btn`;
            globalBtn.style.marginLeft = '1em';
            globalBtn.addEventListener("click", () => generateAllReplies(rule));
            const li = document.createElement("li");
            li.className = "c-tabs__item";
            li.appendChild(globalBtn);
            tabList.appendChild(li);
        });
    }

    async function generateAllReplies(rule) {
        const posts = document.querySelectorAll("li.c-box-list__item.c-post");
        for (const post of posts) {
            const reviewId = post.id.replace("id-", "");
            const HEtextRecenze = post.querySelector("p.c-post__summary")?.innerText?.trim() || "";
            const HEpros = Array.from(post.querySelectorAll(".c-attributes-list--pros li")).map(el => el.innerText.trim()).filter(Boolean).join(", ");
            const HEcons = Array.from(post.querySelectorAll(".c-attributes-list--cons li")).map(el => el.innerText.trim()).filter(Boolean).join(", ");

            const response = await generateReply(rule.promt, HEtextRecenze, HEpros, HEcons, rule.model || "gpt-4-turbo", parseFloat(rule.temperature) || 0.7);
            sessionStorage.setItem(`he-ai-reply-${reviewId}`, response);
        }
        applyStoredReplies();
    }

    function applyStoredReplies() {
        const posts = document.querySelectorAll("li.c-box-list__item.c-post");
        posts.forEach(post => {
            const reviewId = post.id.replace("id-", "");
            const savedReply = sessionStorage.getItem(`he-ai-reply-${reviewId}`);
            if (savedReply) {
                const textarea = post.querySelector("textarea[name='text']");
                if (textarea && !textarea.value.trim()) {
                    textarea.value = savedReply;
                }
            }
        });
    }

    function startScript() {
        expandAllResponses();
        safeInjectButtons();
        injectGlobalButtons();
        setTimeout(applyStoredReplies, 1000);
    }

    function safeInjectButtons(retries = 6, delay = 200) {
        const posts = document.querySelectorAll("li.c-box-list__item.c-post");
        if (posts.length > 0) {
            injectButtons();
        } else if (retries > 0) {
            console.log(`‚è≥ Cekam na DOM... zbyva pokusu: ${retries}`);
            setTimeout(() => safeInjectButtons(retries - 1, delay), delay);
        } else {
            console.warn("‚ö†Ô∏è Nepodarilo se najit recenze, tlacitka nebyla injektovana.");
        }
    }

    fetchSettings();
})();
