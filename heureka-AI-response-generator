(function () {
    'use strict';

    const SETTINGS_URL = 'https://raw.githubusercontent.com/Lukas-dotcom/sova/refs/heads/main/HE-sova-settings.json';
    const OPENAI_API_KEY = window.__OPENAI_API_KEY || "";

    let promptRules = [];

    console.log('ü¶â Skript spusten na strance:', window.location.href);

    // KROK 1: Nacteni konfigurace
    function fetchSettings() {
        console.log('üì• Nacitam nastaveni z:', SETTINGS_URL);
        GM_xmlhttpRequest({
            method: "GET",
            url: SETTINGS_URL,
            onload: function (response) {
                try {
                    const json = JSON.parse(response.responseText);
                    const rules = json?.hodnoceniAi?.rules;
                    if (rules?.length) {
                        promptRules = rules;
                        console.log('‚úÖ Nactena pravidla:', promptRules);
                        startScript();
                    } else {
                        console.error("‚ö†Ô∏è Nenalezena zadna pravidla v JSON.");
                    }
                } catch (e) {
                    console.error("‚ùå Chyba pri parsovani JSON:", e);
                }
            }
        });
    }

    // KROK 2: Otevri vsechny skryte sekce "Reagovat"
    function expandAllResponses() {
        const buttons = document.querySelectorAll("button.js-accordion__toggle");
        console.log(`üîß Oteviram ${buttons.length} sekci ‚ÄûReagovat‚Äú`);
        buttons.forEach((btn) => {
            const acc = btn.closest('.js-accordion');
            if (acc && !acc.classList.contains('is-active')) {
                btn.click();
            }
        });
    }

    // KROK 3: Pridani tlacitek ke kazde recenzi
    function injectButtons() {
        const posts = document.querySelectorAll("li.c-box-list__item.c-post");
        console.log(`üß© Nalezeno ${posts.length} recenzi`);

        posts.forEach((post) => {
            const toggleBtn = post.querySelector(".js-accordion__toggle");
            if (!toggleBtn) return;

            const container = toggleBtn.parentElement;

            promptRules.forEach((rule, index) => {
                const id = `ai-btn-${index}`;
                if (container.querySelector(`.${id}`)) return;

                const newBtn = document.createElement("button");
                newBtn.textContent = `${rule.tlaciko} ü¶â`;
                newBtn.className = `e-button e-button--simple ai-generate-btn ${id}`;
                newBtn.style.marginLeft = '0.5em';
                newBtn.addEventListener("click", () =>
                    handleGenerate(
                        post,
                        rule.promt,
                        rule.model || "gpt-4-turbo",
                        parseFloat(rule.temperature) || 0.7
                    )
                );
                container.appendChild(newBtn);
            });
        });
    }

    // KROK 4: Generovani odpovedi na zaklade kliknuti
    async function handleGenerate(post, promptTemplate, model, temperature) {
        try {
            console.log("üü° Generuji odpoved pro recenzi:", post.id);

            const HEtextRecenze = post.querySelector("p.c-post__summary")?.innerText?.trim() || "";
            const HEpros = Array.from(post.querySelectorAll(".c-attributes-list--pros li")).map(el => el.innerText).join(", ") || "nic";
            const HEcons = Array.from(post.querySelectorAll(".c-attributes-list--cons li")).map(el => el.innerText).join(", ") || "nic";

            console.log("üìù HEtextRecenze:", HEtextRecenze);
            console.log("üëç HEpros:", HEpros);
            console.log("üëé HEcons:", HEcons);
            console.log("üì¶ Model:", model, "| üéõÔ∏è Teplota:", temperature);

            const textarea = post.querySelector("textarea[name='text']");
            if (textarea) {
                const existingResponse = textarea.value?.trim();
                const isPrewritten = existingResponse && existingResponse !== "üïê Generuji odpoved...";

                textarea.value = "üïê Generuji odpoved...";
                textarea.disabled = true;

                try {
                    const finalResponse = await generateReply(
                        promptTemplate,
                        HEtextRecenze,
                        HEpros,
                        HEcons,
                        model,
                        temperature,
                        isPrewritten ? existingResponse : ""
                    );
                    console.log("‚úÖ Odpoved od AI:", finalResponse);
                    textarea.value = finalResponse;
                } catch (e) {
                    textarea.value = "‚ùå Chyba pri generovani odpovedi.";
                    console.error("‚ùå Chyba pri volani OpenAI API:", e);
                } finally {
                    textarea.disabled = false;
                    textarea.scrollIntoView({ behavior: "smooth", block: "center" });
                    textarea.focus();
                }
            } else {
                console.warn("‚ö†Ô∏è Nebylo nalezeno zadne textarea pole pro odpoved.");
            }
        } catch (e) {
            console.error("‚ùå Chyba handleGenerate:", e);
        }
    }

    // KROK 5: Volani OpenAI API
    async function generateReply(promptTemplate, HEtextRecenze, HEpros, HEcons, model, temperature, priorResponse = "") {
        let prompt = promptTemplate
            .replace("{HEtextRecenze}", HEtextRecenze)
            .replace("{HEpros}", HEpros)
            .replace("{HEcons}", HEcons);

        if (priorResponse) {
            prompt += `\n\nPri tvorbe se rid se obsahem odpovedi: ${priorResponse}`;
        }

        console.log(`üì§ Odesilam prompt na OpenAI (model: ${model}, temperature: ${temperature}):`, prompt);

        const res = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${OPENAI_API_KEY}`,
            },
            body: JSON.stringify({
                model: model,
                messages: [
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                temperature: temperature
            })
        });

        const data = await res.json();
        return data.choices?.[0]?.message?.content?.trim() || "[‚ö†Ô∏è Odpoved se nepodarilo ziskat]";
    }

    // START
    function startScript() {
        expandAllResponses();
        safeInjectButtons();
    }

    // Retry verze injectButtons
    function safeInjectButtons(retries = 6, delay = 200) {
        const posts = document.querySelectorAll("li.c-box-list__item.c-post");
        if (posts.length > 0) {
            injectButtons();
        } else if (retries > 0) {
            console.log(`‚è≥ Cekam na DOM... zbyva pokusu: ${retries}`);
            setTimeout(() => safeInjectButtons(retries - 1, delay), delay);
        } else {
            console.warn("‚ö†Ô∏è Nepodarilo se najit recenze, tlacitka nebyla injektovana.");
        }
    }

    fetchSettings();
})();
